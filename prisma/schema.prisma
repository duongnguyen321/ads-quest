generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

model User {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  username      String  @unique
  telegramId    String  @unique @map("telegram_id")
  isPremium     Boolean @default(false) @map("is_premium")
  points        Float   @default(0) // In-game points
  coinBalance   Float   @default(0) // COIN currency (virtual game coin)
  walletAddress String? @map("wallet_address")
  level         Int     @default(1) @map("user_level")
  isUnlock      Boolean @default(false) @map("unlock")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  Level       Level?        @relation(fields: [level], references: [level])
  Transaction Transaction[]

  // Self-referential relationships for friends
  Friends     Friend[]      @relation("UserFriends")
  FriendOf    Friend[]      @relation("FriendUsers")
  UserMission UserMission[]
}

model Level {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  level            Int       @unique @default(1)
  description      String? // Description of the level
  experienceNeeded Int?      @default(0) // Points needed to reach this level
  createdAt        DateTime? @default(now()) @map("created_at")
  updatedAt        DateTime? @default(now()) @updatedAt @map("updated_at")

  User User[]
}

model Friend {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @map("user_id") @db.ObjectId
  friendId  String   @map("friend_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")

  user   User @relation("UserFriends", fields: [userId], references: [id])
  friend User @relation("FriendUsers", fields: [friendId], references: [id])
}

model Mission {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime?     @default(now())
  amount      Float
  type        CurrencyType
  link        String
  title       String
  description String?
  createdAt   DateTime?     @default(now()) @map("created_at")
  updatedAt   DateTime?     @default(now()) @updatedAt @map("updated_at")
  UserMission UserMission[]
}

model UserMission {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  telegramId String    @map("telegram_id")
  missionId  String    @map("mission_id") @db.ObjectId
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @default(now()) @updatedAt @map("updated_at")

  user    User    @relation(fields: [telegramId], references: [telegramId], onDelete: Cascade)
  mission Mission @relation(fields: [missionId], references: [id], onDelete: Cascade)
}

model Transaction {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  telegramId      String          @map("telegram_id")
  amount          Float // Amount of COIN or game points
  currencyType    CurrencyType // Enum to track type of currency (COIN or POINTS)
  transactionType TransactionType // Enum for types of transactions (earn, spend, bonus)
  hash            String?
  createdAt       DateTime        @default(now()) @map("created_at")
  user            User            @relation(fields: [telegramId], references: [telegramId], onDelete: Cascade)
}

enum TransactionType {
  EARN
  SPEND
  BONUS
}

enum CurrencyType {
  COIN
  POINTS
}
